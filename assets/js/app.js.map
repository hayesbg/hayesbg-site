{"version":3,"sources":["app.js","debug.js","helpers.js","darksection.js"],"names":["responsiveActions","query","Helper","getMediaQuery","slantHeight","DarkSection","negativeSlantHeight","$","css","padding-top","padding-bottom","margin-top","margin-bottom","attr","Debug","isDebug","function","functionName","output","this","console","log","value","valueName","key","toRadians","rotation","y","Math","PI","windowInEms","window","width","parseFloat","i","queries","config","rotationRatio","minRotation","maxRotation","minWidth","maxWidth","numWrappers","init","windowWidth","addClassesToHTML","injectWrappersToHTML","setRotations","setPaddings","onResize","removeWrappersfromHTML","addClass","removeClass","not","children","wrap","num","wrappers","join","unwrap","modifyHTML","getRotation","rotaionSteps","radians","outer","outerRadian","inner","content","getOuterSlantPadding","angleA","angleB","radianA","radianB","padding","tan","cos","getOuterSlantWidth","height","visibleWidth","widthToAdd","sin","trueWidth","getSectionPadding","sectionWidth","rotatedHeight","outerSlantPadding","target","sectionPadding","document","ready","resize"],"mappings":"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","file":"app.js","sourcesContent":["// (function($){\n// Set the padding for #about-us so the background displays correctly.\nfunction responsiveActions() {\n  // Get current Query.\n  var query = Helper.getMediaQuery();\n\n  var slantHeight = DarkSection.slantHeight;\n  var negativeSlantHeight = '-' + slantHeight;\n\n  if ( query === 'large' || query === 'xlarge' ) {\n    $('#about-us').css({\"padding-top\": slantHeight + 'px', \"padding-bottom\": '0', \"margin-top\": negativeSlantHeight + 'px', \"margin-bottom\": '0',});\n\n    $('footer .slant-outer').css({\"margin-bottom\": negativeSlantHeight + 'px'});\n\n    $('footer .footer-logo').attr('src', '/assets/imgs/hbgi_logo_white.svg');\n\n    $('main.site-inner').css({\"padding-bottom\": slantHeight + 'px', \"margin-bottom\": negativeSlantHeight + 'px',});\n\n  } else {\n\n    $('#about-us').css({\"padding-top\": slantHeight + 'px', \"padding-bottom\": slantHeight + 'px', \"margin-top\": negativeSlantHeight + 'px', \"margin-bottom\": negativeSlantHeight + 'px'});\n\n    // $('footer ').css({\"margin-bottom\": '0', \"padding-bottom\": '0'});\n\n    $('footer .footer-logo').attr('src', '/assets/imgs/hbgi_logo.svg');\n\n    // console.log('else clause is on');\n\n  }\n\n  // console.log('negative margin:', negativeSlantHeight);\n\n  // console.log('RA query is:', query);\n}\n\n$(document).ready(function() {\n\n  // setDarkClasses('set');\n  DarkSection.init();\n  responsiveActions();\n\n  var windowWidth = $(window).width();\n\n  // console.log('Media query on load:', Helper.getMediaQuery());\n\n  // Window resize event.\n  $(window).resize(function() {\n\n    // Check window width has actually changed and it's not just iOS triggering a resize event on scroll\n    if ( $(window).width() != windowWidth ) {\n\n      // Update the window width for next time\n      windowWidth = $(window).width();\n\n      // Do stuff here\n      DarkSection.onResize();\n      responsiveActions();\n    }\n\n    // console.log('Current media query:', Helper.getMediaQuery());\n\n    // setDarkClasses('onResize');\n    \n  });\n\n\n});\n\n\n\n// })(jQuery);\n","var Debug = {\n\n  /**\n   * Toggle objects debug mode.\n   * @type {Boolean}\n   */\n  isDebug: true,\n\n  /**\n   * @function\n   * Check if function has been called and what it returned.\n   * @param  {String}         functionName Function name.\n   * @param  {Boolean/string} output   =             false The return of the function, or false.\n   */\n  function: function( functionName, output ) {\n\n    if ( this.isDebug ) {\n\n      if ( output === 'undefined' ) {\n        console.log( functionName + ' has been called. Function has no return');\n      } else {\n        console.log( functionName + ' has been called. Returned: ' + output );\n      }\n    }\n  },\n  value: function( functionName, valueName ) {\n\n    if ( this.isDebug ) {\n      console.log( 'Within ' + functionName + ':' );\n\n      for ( var key in valueName ) {\n        console.log( key, 'is: ', valueName[key]);\n      }\n\n    }\n  }\n};\n","var Helper = {\n\n  /**\n   * Convert degrees to radians.\n   *\n   * @param  {integer} rotation Degree of rotation.\n   *\n   * @return {integer}          Radian of rotation.\n   */\n  toRadians: function( rotation ) {\n\n    var y = (rotation * Math.PI) / 180;\n\n    return y;\n  },\n  /**\n   * Get current media query based on font-size value set in CSS Stylesheet.\n   *\n   * @return {string} Media query name, which is the same as SCSS variable name.\n   */\n  getMediaQuery: function() {\n\n    var windowInEms = $(window).width() / parseFloat($('html').css('font-size'));\n    console.log('value for check is:', windowInEms);\n\n    var i = 0;\n    var queries = ['small', 'medium', 'large', 'xlarge'];\n\n    if ( windowInEms > 40 ) { // Medium\n      i++;\n    }\n    if ( windowInEms > 60 ) { // Large\n      i++;\n    }\n    if ( windowInEms > 90 ) { // Extra Large\n      i++;\n    }\n\n    console.log('value of i is:', i);\n    var query = queries[i];\n\n    return query;\n  }\n\n};\n","var DarkSection = {\n\n  /**\n   * Values\n   */\n\n  // Settings for display of rotaiton\n  config: {\n    // Set ratio between .outer-slant and .inner-slant\n    rotationRatio: .375,\n    // Set minimum and maximum rotation.\n    minRotation: 8,\n    maxRotation: 18,\n    // Set minimum and maximum width for min & max rotation values to be applied at.\n    minWidth: 320,\n    maxWidth: 1440\n  },\n  // For storing rotation values\n  rotation: {},\n  // Number of times elements had wrappers added to them.\n  numWrappers: 0,\n  // Slant padding. Use this for any negative padding needed for backgrounds.\n  slantHeight: '',\n\n  /**\n   * Methods\n   */\n\n  init: function() {\n\n    var windowWidth = $(window).width();\n    this.addClassesToHTML();\n    this.injectWrappersToHTML();\n\n    this.setRotations(windowWidth);\n    this.setPaddings(windowWidth);\n\n\n  },\n  onResize: function() {\n    // Update window width.\n    var windowWidth = $(window).width();\n\n    // Take care of HTML\n    DarkSection.addClassesToHTML();\n    DarkSection.removeWrappersfromHTML();\n    DarkSection.injectWrappersToHTML();\n\n\n    // Update Rotations.\n    DarkSection.setRotations(windowWidth);\n\n    // Update Padding.\n    DarkSection.setPaddings(windowWidth);\n  },\n  /**\n   * @function\n   * Add wrapper elements to div.content within a .dark element.\n   * This function should only be called once on page load.\n   */\n  addClassesToHTML: function() {\n\n    var query = Helper.getMediaQuery();\n\n    $('[data-darksection]').addClass('dark');\n\n    if ( query === 'small' ) {\n      $('[data-darksection=\"medium-down\"]').addClass('dark').removeClass('dark-off');\n      $('[data-darksection=\"large-up\"]').addClass('dark-off').removeClass('dark');\n    }\n    if ( query === 'medium' ) {\n      $('[data-darksection=\"medium-down\"]').addClass('dark').removeClass('dark-off');\n      $('[data-darksection=\"large-up\"]').addClass('dark-off').removeClass('dark');\n    }\n    if ( query === 'large' ) {\n      $('[data-darksection=\"medium-down\"]').addClass('dark-off').removeClass('dark');\n      $('[data-darksection=\"large-up\"]').addClass('dark').removeClass('dark-off');\n\n    }\n    if ( query === 'xlarge' ) {\n      $('[data-darksection=\"medium-down\"]').addClass('dark-off').removeClass('dark');\n      $('[data-darksection=\"large-up\"]').addClass('dark').removeClass('dark-off');\n    }\n  },\n  injectWrappersToHTML: function() {\n    // wrapping elements (this is for easy editing).\n    // this.numWrappers  = ;\n\n    if ( $('.dark:has(.content)') ) {\n      $('.dark').not(':has(.slant-wrapper)').children('.content').wrap(function(i) {\n\n        DarkSection.numWrappers++;\n\n        var num = DarkSection.numWrappers;\n\n        var wrappers = [\n          '<div class=\"slant-wrapper\" data-slantwrapper=\"'+num+'\">',\n          '<div class=\"slant-outer\">',\n          '<div class=\"slant-inner\">',\n          '<div class=\"content-wrapper\">',\n          '</div></div></div></div>'\n        ];\n        var output = wrappers.join('');\n\n        return output;\n\n      });\n\n      Debug.function('addWrappersToHTML', this.numWrappers);\n    }\n  },\n  removeWrappersfromHTML: function() {\n    // if ( $('.dark-off:has(.slant-wrapper)') ) {\n    var darkOff = $('.dark-off');\n\n    if ( $('.dark-off:has(.slant-wrapper .slant-outer .slant-inner .content-wrapper)').not('.dark') ) {\n      $('.dark-off:has(.slant-wrapper .slant-outer .slant-inner .content-wrapper) .content').unwrap().unwrap().unwrap().unwrap();\n    }\n  },\n  modifyHTML: function() {\n    this.addClassesToHTML();\n  },\n  getRotation: function(width) {\n\n    // set for later\n    var rotation;\n    // Get ratio for degrees per pixel of width.\n    var rotaionSteps = (this.config.maxRotation - this.config.minRotation) / (this.config.maxWidth - this.config.minWidth);\n\n    // If viewport width is below minimum set width, rotation is set to max.\n    // Else if viewport width is above maximum set width, rotation is set to min.\n    // Else ratio is applied to calculate rotation based on width of viewport.\n    if ( width <= this.config.minWidth ) {\n\n      rotation = this.config.maxRotation;\n\n    } else if ( width >= this.config.maxWidth ) {\n\n      rotation = this.config.minRotation;\n\n    } else {\n\n      rotation = this.config.maxRotation - ((width - this.config.minWidth) * rotaionSteps);\n    }\n    var radians = Helper.toRadians(rotation);\n    // Set values in rotation object.\n    this.rotation = {\n      outer: rotation,\n      outerRadian: radians,\n      inner: rotation * this.config.rotationRatio,\n      content: rotation - (rotation * this.config.rotationRatio),\n    };\n  },\n  getOuterSlantPadding: function( width ) {\n    // Get angles.\n    var angleA = this.rotation.outer;\n    var angleB = angleA - (angleA * (1 - this.config.rotationRatio));\n    // Get radians from angles.\n    var radianA = this.rotation.outerRadian;\n    var radianB = Helper.toRadians(angleB);\n    // Get correct padding.\n    var padding = Math.tan(radianB) * (Math.cos(radianA) * (width / 2));\n\n    return padding;\n  },\n  getOuterSlantWidth: function( width, height ) {\n\n    var radianA = this.rotation.outerRadian;\n    // Fig 2. AC = cos(<BAC) * AB.\n    var visibleWidth = Math.cos(radianA) * width;\n    // Fig 1. AC = sin(<ABC) * BA.\n    // Fig 1. AD = cos(<CAD) * AC.\n    var widthToAdd = Math.cos(radianA) * (Math.sin(radianA) * height);\n    // Get the true width of the rectangle.\n    var trueWidth = visibleWidth + widthToAdd + widthToAdd;\n\n    Debug.value('getOuterSlantWidth',\n    {visibleWidth: visibleWidth, widthToAdd: widthToAdd, trueWidth: trueWidth}\n    );\n\n    return trueWidth;\n  },\n  getSectionPadding: function( width, height ) {\n\n    var radianA = this.rotation.outerRadian;\n    // Get width of rotated rectangle.\n    var sectionWidth = this.getOuterSlantWidth( width, height );\n    // Use this to store in accessible object value.\n    var slantHeight = sectionWidth * Math.sin(radianA)\n    // Get section height.\n    var rotatedHeight = slantHeight + height * Math.cos(radianA);\n    // Convert the new height into a usable padding value.\n    var padding = (rotatedHeight - height) / 2;\n\n    this.slantHeight = slantHeight;\n\n    return padding;\n  },\n  setRotations: function( width ) {\n\n    this.getRotation(width);\n\n    var rotation = this.rotation;\n\n    $('.slant-outer').css(\"transform\", \"rotate(\"+rotation.outer+\"deg)\");\n\n    $('.slant-inner').css(\"transform\", \"rotate(-\"+rotation.inner+\"deg)\");\n\n    $('.content-wrapper').css(\"transform\", \"rotate(-\"+rotation.content+\"deg)\");\n  },\n  setPaddings: function( width ) {\n    // Get window width.\n    // var width = $(window).width();\n    // Get .slant-outer padding.\n    var outerSlantPadding = this.getOuterSlantPadding( width );\n\n    // Set .slant-outer padding.\n    $('.slant-outer').css({\"padding-top\": outerSlantPadding, \"padding-bottom\": outerSlantPadding});\n\n    // Loop through .dark sections and apply padding individually.\n    for ( var i = 0; i < this.numWrappers; i++ ) {\n      // Use these vars to set up a way to target .dark sections individually.\n      var num = i + 1;\n      var target = '[data-slantwrapper=\"'+num+'\"]';\n\n      // Get height of rectangle for use in section padding function.\n      var height = $(target).height();\n      // Get section padding using section height and window width.\n      var sectionPadding = this.getSectionPadding(width, height);\n\n      // Set .dark section padding to make up for incorrect height returned from CSS.\n      $(target).css({\"padding-top\": sectionPadding, \"padding-bottom\": sectionPadding});\n    }\n  },\n};\n"]}